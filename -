setup.py:1:1: D400 First line should end with a period
  |
1 | / """
2 | | This file is needed for python 3.10
3 | |
4 | | See
5 | | https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
6 | | """
  | |___^ D400
7 |   from setuptools import setup
  |
  = help: Add period

setup.py:1:1: D404 First word of the docstring should not be "This"
  |
1 | / """
2 | | This file is needed for python 3.10
3 | |
4 | | See
5 | | https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
6 | | """
  | |___^ D404
7 |   from setuptools import setup
  |

src/raimad/__init__.py:7:1: E402 Module level import not at top of file
  |
5 | epsilon = sys.float_info.epsilon
6 |
7 | from raimad.empty import Empty, EmptyType
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
8 | from raimad import graphviz as gv
9 | from raimad.helpers import (
  |

src/raimad/__init__.py:8:1: E402 Module level import not at top of file
   |
 7 | from raimad.empty import Empty, EmptyType
 8 | from raimad import graphviz as gv
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
 9 | from raimad.helpers import (
10 |     fullcircle,
   |

src/raimad/__init__.py:9:1: E402 Module level import not at top of file
   |
 7 |   from raimad.empty import Empty, EmptyType
 8 |   from raimad import graphviz as gv
 9 | / from raimad.helpers import (
10 | |     fullcircle,
11 | |     halfcircle,
12 | |     quartercircle,
13 | |     eigthcircle,
14 | |     semicircle,
15 | |     demisemicircle,
16 | |     hemidemisemicircle,
17 | |     angle_between,
18 | |     polar,
19 | |     is_compo_class,
20 | |     custom_base,
21 | |     WINGDINGS,
22 | |     wingdingify,
23 | |     midpoint,
24 | |     add,
25 | |     eq,
26 | |     sub,
27 | |     distance_between,
28 | |     )
   | |_____^ E402
29 |   from raimad import affine
30 |   import raimad.iters as iters
   |

src/raimad/__init__.py:26:5: F401 `raimad.helpers.sub` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
24 |     add,
25 |     eq,
26 |     sub,
   |     ^^^ F401
27 |     distance_between,
28 |     )
   |
   = help: Add unused import `sub` to __all__

src/raimad/__init__.py:29:1: E402 Module level import not at top of file
   |
27 |     distance_between,
28 |     )
29 | from raimad import affine
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ E402
30 | import raimad.iters as iters
31 | from raimad.iters import (
   |

src/raimad/__init__.py:30:1: E402 Module level import not at top of file
   |
28 |     )
29 | from raimad import affine
30 | import raimad.iters as iters
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
31 | from raimad.iters import (
32 |     overlap,
   |

src/raimad/__init__.py:31:1: E402 Module level import not at top of file
   |
29 |   from raimad import affine
30 |   import raimad.iters as iters
31 | / from raimad.iters import (
32 | |     overlap,
33 | |     nonoverlap,
34 | |
35 | |     duplets,
36 | |     triplets,
37 | |     quadlets,
38 | |     quintlets,
39 | |
40 | |     couples,
41 | |     triples,
42 | |     quadles,
43 | |     quintles,
44 | |
45 | |     flatten,
46 | |     braid
47 | |     )
   | |_____^ E402
48 |   from raimad.string_import import string_import
49 |   from raimad.docparse import split_docstring
   |

src/raimad/__init__.py:48:1: E402 Module level import not at top of file
   |
46 |     braid
47 |     )
48 | from raimad.string_import import string_import
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
49 | from raimad.docparse import split_docstring
   |

src/raimad/__init__.py:49:1: E402 Module level import not at top of file
   |
47 |     )
48 | from raimad.string_import import string_import
49 | from raimad.docparse import split_docstring
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
50 |
51 | from raimad.dictlist import FilteredDictList, DictList
   |

src/raimad/__init__.py:51:1: E402 Module level import not at top of file
   |
49 | from raimad.docparse import split_docstring
50 |
51 | from raimad.dictlist import FilteredDictList, DictList
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
52 |
53 | from raimad.annotation import Annotation
   |

src/raimad/__init__.py:53:1: E402 Module level import not at top of file
   |
51 | from raimad.dictlist import FilteredDictList, DictList
52 |
53 | from raimad.annotation import Annotation
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
54 | from raimad.mark import Mark
55 | from raimad.layer import Layer
   |

src/raimad/__init__.py:54:1: E402 Module level import not at top of file
   |
53 | from raimad.annotation import Annotation
54 | from raimad.mark import Mark
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
55 | from raimad.layer import Layer
56 | from raimad.option import Option
   |

src/raimad/__init__.py:55:1: E402 Module level import not at top of file
   |
53 | from raimad.annotation import Annotation
54 | from raimad.mark import Mark
55 | from raimad.layer import Layer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
56 | from raimad.option import Option
57 | from raimad.boundpoint import BoundPoint
   |

src/raimad/__init__.py:56:1: E402 Module level import not at top of file
   |
54 | from raimad.mark import Mark
55 | from raimad.layer import Layer
56 | from raimad.option import Option
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
57 | from raimad.boundpoint import BoundPoint
58 | from raimad.transform import Transform
   |

src/raimad/__init__.py:57:1: E402 Module level import not at top of file
   |
55 | from raimad.layer import Layer
56 | from raimad.option import Option
57 | from raimad.boundpoint import BoundPoint
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
58 | from raimad.transform import Transform
59 | from raimad.compo import Compo
   |

src/raimad/__init__.py:58:1: E402 Module level import not at top of file
   |
56 | from raimad.option import Option
57 | from raimad.boundpoint import BoundPoint
58 | from raimad.transform import Transform
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
59 | from raimad.compo import Compo
60 | from raimad.compo import MarksContainer
   |

src/raimad/__init__.py:59:1: E402 Module level import not at top of file
   |
57 | from raimad.boundpoint import BoundPoint
58 | from raimad.transform import Transform
59 | from raimad.compo import Compo
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
60 | from raimad.compo import MarksContainer
61 | from raimad.compo import SubcompoContainer
   |

src/raimad/__init__.py:60:1: E402 Module level import not at top of file
   |
58 | from raimad.transform import Transform
59 | from raimad.compo import Compo
60 | from raimad.compo import MarksContainer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
61 | from raimad.compo import SubcompoContainer
62 | from raimad.compo import ProxyableDictList
   |

src/raimad/__init__.py:61:1: E402 Module level import not at top of file
   |
59 | from raimad.compo import Compo
60 | from raimad.compo import MarksContainer
61 | from raimad.compo import SubcompoContainer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
62 | from raimad.compo import ProxyableDictList
63 | from raimad.proxy import Proxy
   |

src/raimad/__init__.py:62:1: E402 Module level import not at top of file
   |
60 | from raimad.compo import MarksContainer
61 | from raimad.compo import SubcompoContainer
62 | from raimad.compo import ProxyableDictList
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
63 | from raimad.proxy import Proxy
64 | from raimad.proxy import LMap
   |

src/raimad/__init__.py:62:26: F401 `raimad.compo.ProxyableDictList` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
60 | from raimad.compo import MarksContainer
61 | from raimad.compo import SubcompoContainer
62 | from raimad.compo import ProxyableDictList
   |                          ^^^^^^^^^^^^^^^^^ F401
63 | from raimad.proxy import Proxy
64 | from raimad.proxy import LMap
   |
   = help: Add unused import `ProxyableDictList` to __all__

src/raimad/__init__.py:63:1: E402 Module level import not at top of file
   |
61 | from raimad.compo import SubcompoContainer
62 | from raimad.compo import ProxyableDictList
63 | from raimad.proxy import Proxy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
64 | from raimad.proxy import LMap
65 | from raimad.partial import Partial
   |

src/raimad/__init__.py:64:1: E402 Module level import not at top of file
   |
62 | from raimad.compo import ProxyableDictList
63 | from raimad.proxy import Proxy
64 | from raimad.proxy import LMap
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
65 | from raimad.partial import Partial
66 | from raimad.bbox import AbstractBBox, BBox
   |

src/raimad/__init__.py:65:1: E402 Module level import not at top of file
   |
63 | from raimad.proxy import Proxy
64 | from raimad.proxy import LMap
65 | from raimad.partial import Partial
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
66 | from raimad.bbox import AbstractBBox, BBox
67 | from raimad.boundbbox import BoundBBox
   |

src/raimad/__init__.py:66:1: E402 Module level import not at top of file
   |
64 | from raimad.proxy import LMap
65 | from raimad.partial import Partial
66 | from raimad.bbox import AbstractBBox, BBox
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
67 | from raimad.boundbbox import BoundBBox
   |

src/raimad/__init__.py:67:1: E402 Module level import not at top of file
   |
65 | from raimad.partial import Partial
66 | from raimad.bbox import AbstractBBox, BBox
67 | from raimad.boundbbox import BoundBBox
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
68 |
69 | from raimad.rectlw import RectLW
   |

src/raimad/__init__.py:69:1: E402 Module level import not at top of file
   |
67 | from raimad.boundbbox import BoundBBox
68 |
69 | from raimad.rectlw import RectLW
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
70 | from raimad.rectwire import RectWire
71 | from raimad.circle import Circle
   |

src/raimad/__init__.py:70:1: E402 Module level import not at top of file
   |
69 | from raimad.rectlw import RectLW
70 | from raimad.rectwire import RectWire
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
71 | from raimad.circle import Circle
72 | from raimad.ansec import AnSec
   |

src/raimad/__init__.py:71:1: E402 Module level import not at top of file
   |
69 | from raimad.rectlw import RectLW
70 | from raimad.rectwire import RectWire
71 | from raimad.circle import Circle
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
72 | from raimad.ansec import AnSec
73 | from raimad.custompoly import CustomPoly
   |

src/raimad/__init__.py:72:1: E402 Module level import not at top of file
   |
70 | from raimad.rectwire import RectWire
71 | from raimad.circle import Circle
72 | from raimad.ansec import AnSec
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
73 | from raimad.custompoly import CustomPoly
   |

src/raimad/__init__.py:73:1: E402 Module level import not at top of file
   |
71 | from raimad.circle import Circle
72 | from raimad.ansec import AnSec
73 | from raimad.custompoly import CustomPoly
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
74 |
75 | from raimad import typing
   |

src/raimad/__init__.py:75:1: E402 Module level import not at top of file
   |
73 | from raimad.custompoly import CustomPoly
74 |
75 | from raimad import typing
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ E402
76 | from raimad import typing as t
   |

src/raimad/__init__.py:76:1: E402 Module level import not at top of file
   |
75 | from raimad import typing
76 | from raimad import typing as t
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
77 |
78 | from raimad import cif
   |

src/raimad/__init__.py:78:1: E402 Module level import not at top of file
   |
76 | from raimad import typing as t
77 |
78 | from raimad import cif
   | ^^^^^^^^^^^^^^^^^^^^^^ E402
79 | from raimad.cif.shorthand import export_cif
80 | from raimad.svg import export_svg
   |

src/raimad/__init__.py:79:1: E402 Module level import not at top of file
   |
78 | from raimad import cif
79 | from raimad.cif.shorthand import export_cif
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
80 | from raimad.svg import export_svg
81 | from raimad.show import show
   |

src/raimad/__init__.py:80:1: E402 Module level import not at top of file
   |
78 | from raimad import cif
79 | from raimad.cif.shorthand import export_cif
80 | from raimad.svg import export_svg
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
81 | from raimad.show import show
82 | from raimad import err
   |

src/raimad/__init__.py:81:1: E402 Module level import not at top of file
   |
79 | from raimad.cif.shorthand import export_cif
80 | from raimad.svg import export_svg
81 | from raimad.show import show
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
82 | from raimad import err
   |

src/raimad/__init__.py:82:1: E402 Module level import not at top of file
   |
80 | from raimad.svg import export_svg
81 | from raimad.show import show
82 | from raimad import err
   | ^^^^^^^^^^^^^^^^^^^^^^ E402
83 |
84 | from raimad.fortune import fortune
   |

src/raimad/__init__.py:84:1: E402 Module level import not at top of file
   |
82 | from raimad import err
83 |
84 | from raimad.fortune import fortune
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
85 | from raimad.fortune import fortunes_technology
86 | from raimad.fortune import fortunes_economy
   |

src/raimad/__init__.py:85:1: E402 Module level import not at top of file
   |
84 | from raimad.fortune import fortune
85 | from raimad.fortune import fortunes_technology
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
86 | from raimad.fortune import fortunes_economy
87 | from raimad.fortune import fortunes_education
   |

src/raimad/__init__.py:86:1: E402 Module level import not at top of file
   |
84 | from raimad.fortune import fortune
85 | from raimad.fortune import fortunes_technology
86 | from raimad.fortune import fortunes_economy
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
87 | from raimad.fortune import fortunes_education
88 | from raimad.fortune import fortunes_politics
   |

src/raimad/__init__.py:87:1: E402 Module level import not at top of file
   |
85 | from raimad.fortune import fortunes_technology
86 | from raimad.fortune import fortunes_economy
87 | from raimad.fortune import fortunes_education
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
88 | from raimad.fortune import fortunes_politics
89 | from raimad.fortune import fortunes_engineering
   |

src/raimad/__init__.py:88:1: E402 Module level import not at top of file
   |
86 | from raimad.fortune import fortunes_economy
87 | from raimad.fortune import fortunes_education
88 | from raimad.fortune import fortunes_politics
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
89 | from raimad.fortune import fortunes_engineering
90 | from raimad.fortune import fortunes_resilience
   |

src/raimad/__init__.py:89:1: E402 Module level import not at top of file
   |
87 | from raimad.fortune import fortunes_education
88 | from raimad.fortune import fortunes_politics
89 | from raimad.fortune import fortunes_engineering
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
90 | from raimad.fortune import fortunes_resilience
91 | from raimad.fortune import fortunes_misc
   |

src/raimad/__init__.py:90:1: E402 Module level import not at top of file
   |
88 | from raimad.fortune import fortunes_politics
89 | from raimad.fortune import fortunes_engineering
90 | from raimad.fortune import fortunes_resilience
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
91 | from raimad.fortune import fortunes_misc
92 | from raimad.fortune import fortunes_all
   |

src/raimad/__init__.py:91:1: E402 Module level import not at top of file
   |
89 | from raimad.fortune import fortunes_engineering
90 | from raimad.fortune import fortunes_resilience
91 | from raimad.fortune import fortunes_misc
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
92 | from raimad.fortune import fortunes_all
   |

src/raimad/__init__.py:92:1: E402 Module level import not at top of file
   |
90 | from raimad.fortune import fortunes_resilience
91 | from raimad.fortune import fortunes_misc
92 | from raimad.fortune import fortunes_all
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
93 |
94 | from raimad.snowman import Snowman
   |

src/raimad/__init__.py:94:1: E402 Module level import not at top of file
   |
92 | from raimad.fortune import fortunes_all
93 |
94 | from raimad.snowman import Snowman
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
95 |
96 | # The function of __all__ is to specify which things get imported
   |

src/raimad/ansec.py:1:1: D100 Missing docstring in public module
src/raimad/ansec.py:11:7: D101 Missing docstring in public class
   |
 9 | import raimad as rai
10 |
11 | class AnSecError(Exception):
   |       ^^^^^^^^^^ D101
12 |     pass
   |

src/raimad/ansec.py:14:7: D101 Missing docstring in public class
   |
12 |     pass
13 |
14 | class AnSecRadiusError(AnSecError):
   |       ^^^^^^^^^^^^^^^^ D101
15 |     pass
   |

src/raimad/ansec.py:17:7: D101 Missing docstring in public class
   |
15 |     pass
16 |
17 | class AnSecRadiusTooManyArgumentsError(AnSecRadiusError):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
18 |     pass
   |

src/raimad/ansec.py:20:7: D101 Missing docstring in public class
   |
18 |     pass
19 |
20 | class AnSecRadiusNotEnoughArgumentsError(AnSecRadiusError):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
21 |     pass
   |

src/raimad/ansec.py:23:7: D101 Missing docstring in public class
   |
21 |     pass
22 |
23 | class AnSecRadiusIncorrectArgumentsError(AnSecRadiusError):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
24 |     pass
   |

src/raimad/ansec.py:26:7: D101 Missing docstring in public class
   |
24 |     pass
25 |
26 | class AnSecThetaError(AnSecError):
   |       ^^^^^^^^^^^^^^^ D101
27 |     pass
   |

src/raimad/ansec.py:29:7: D101 Missing docstring in public class
   |
27 |     pass
28 |
29 | class AnSecThetaTooManyArgumentsError(AnSecThetaError):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
30 |     pass
   |

src/raimad/ansec.py:32:7: D101 Missing docstring in public class
   |
30 |     pass
31 |
32 | class AnSecThetaNotEnoughArgumentsError(AnSecThetaError):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
33 |     pass
   |

src/raimad/ansec.py:35:7: D101 Missing docstring in public class
   |
33 |     pass
34 |
35 | class AnSecThetaIncorrectArgumentsError(AnSecThetaError):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
36 |     pass
   |

src/raimad/ansec.py:39:5: D400 First line should end with a period
   |
38 |   class AnSec(rai.Compo):
39 | /     """
40 | |     Annular Sector
41 | |
42 | |     A polygon approximating an annular sector,
43 | |     or, in working men's terms, a "pizza crust".
44 | |     There are many possible ways to define an AnSec;
45 | |     # TODO examples
46 | |     """
   | |_______^ D400
47 |
48 |       browser_tags = ["builtin", "polygon"]
   |
   = help: Add period

src/raimad/ansec.py:88:9: D102 Missing docstring in public method
   |
87 |     @classmethod
88 |     def from_auto(
   |         ^^^^^^^^^ D102
89 |             cls,
90 |             r1: float | None = None,
   |

src/raimad/ansec.py:112:9: D102 Missing docstring in public method
    |
111 |     @staticmethod
112 |     def interpret_radius(
    |         ^^^^^^^^^^^^^^^^ D102
113 |             r1: float | None,
114 |             r2: float | None,
    |

src/raimad/ansec.py:202:9: D102 Missing docstring in public method
    |
201 |     @staticmethod
202 |     def interpret_theta(
    |         ^^^^^^^^^^^^^^^ D102
203 |             t1: float | None,
204 |             t2: float | None,
    |

src/raimad/bbox.py:30:5: D419 Docstring is empty
   |
28 |   T = TypeVar('T', 'rai.typing.Point', 'rai.typing.BoundPoint', )
29 |   class AbstractBBox(Generic[T]):
30 | /     """
31 | |     """
   | |_______^ D419
32 |
33 |       max_x: float
   |

src/raimad/bbox.py:557:7: D101 Missing docstring in public class
    |
557 | class BBox(AbstractBBox['rai.typing.Point']):
    |       ^^^^ D101
558 |     def interpolate(
559 |             self,
    |

src/raimad/bbox.py:558:9: D102 Missing docstring in public method
    |
557 | class BBox(AbstractBBox['rai.typing.Point']):
558 |     def interpolate(
    |         ^^^^^^^^^^^ D102
559 |             self,
560 |             x_ratio: float,
    |

src/raimad/boundpoint.py:8:5: D204 [*] 1 blank line required after class docstring
   |
 7 |   class BoundPoint():
 8 | /     """
 9 | |     A point bound to a Proxy.
10 | |
11 | |     There is often a desire to perform a certain transformation
12 | |     of some proxy in reference to a given point at that proxy.
13 | |     We might want to rotate a proxy around the top left corner
14 | |     of its bbox,
15 | |     or move a proxy such that one of its marks is at a given point.
16 | |
17 | |     These things can be done with the following syntax in raimad:
18 | |     - `someproxy.bbox.top_left.rotate(someangle)`
19 | |     - `someproxy.marks.important_mark.to((x, y))`
20 | |
21 | |     In the examples above, `top_left` and `important_mark` are both
22 | |     BoundPoints.
23 | |     They behave just like regular points (a tuple of x and y),
24 | |     but they also define transformation methods like
25 | |     `rotate`, `to`, `vflip`, and so forth
26 | |     that perform the corresponding transformation
27 | |     to the bound proxy, with the BoundPoint treated as the new origin
28 | |     for the transformation.
29 | |     """
   | |_______^ D204
30 |       def __init__(self, x: float, y: float, proxy: 'rai.typing.Proxy'):
31 |           self._x = x
   |
   = help: Insert 1 blank line after class docstring

src/raimad/boundpoint.py:201:9: D200 One-line docstring should fit on one line
    |
200 |       def flip(self) -> 'rai.typing.Proxy':
201 | /         """
202 | |         TODO add tests
203 | |         """
    | |___________^ D200
204 |           self._proxy.transform.flip(self._x, self._y)
205 |           return self._proxy
    |
    = help: Reformat to one line

src/raimad/boundpoint.py:201:9: D400 First line should end with a period
    |
200 |       def flip(self) -> 'rai.typing.Proxy':
201 | /         """
202 | |         TODO add tests
203 | |         """
    | |___________^ D400
204 |           self._proxy.transform.flip(self._x, self._y)
205 |           return self._proxy
    |
    = help: Add period

src/raimad/boundpoint.py:208:9: D200 One-line docstring should fit on one line
    |
207 |       def hflip(self) -> 'rai.typing.Proxy':
208 | /         """
209 | |         TODO add tests
210 | |         """
    | |___________^ D200
211 |           self._proxy.transform.flip(self._x)
212 |           return self._proxy
    |
    = help: Reformat to one line

src/raimad/boundpoint.py:208:9: D400 First line should end with a period
    |
207 |       def hflip(self) -> 'rai.typing.Proxy':
208 | /         """
209 | |         TODO add tests
210 | |         """
    | |___________^ D400
211 |           self._proxy.transform.flip(self._x)
212 |           return self._proxy
    |
    = help: Add period

src/raimad/boundpoint.py:215:9: D200 One-line docstring should fit on one line
    |
214 |       def vflip(self) -> 'rai.typing.Proxy':
215 | /         """
216 | |         TODO add tests
217 | |         """
    | |___________^ D200
218 |           self._proxy.transform.flip(self._y)
219 |           return self._proxy
    |
    = help: Reformat to one line

src/raimad/boundpoint.py:215:9: D400 First line should end with a period
    |
214 |       def vflip(self) -> 'rai.typing.Proxy':
215 | /         """
216 | |         TODO add tests
217 | |         """
    | |___________^ D400
218 |           self._proxy.transform.flip(self._y)
219 |           return self._proxy
    |
    = help: Add period

src/raimad/cli.py:16:5: D202 [*] No blank lines allowed after function docstring (found 1)
   |
15 | def cli(custom_args: Sequence[str] | None = None) -> None:
16 |     """Parse command line arguments and execute the desired action."""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D202
17 |
18 |     ensure_pwd_in_path()
   |
   = help: Remove blank line(s) after function docstring

src/raimad/cli.py:186:5: D103 Missing docstring in public function
    |
184 |         )
185 |
186 | def ensure_pwd_in_path() -> None:
    |     ^^^^^^^^^^^^^^^^^^ D103
187 |     try:
188 |         pwd = os.getcwd()
    |

src/raimad/cli.py:190:9: F821 Undefined name `printf`
    |
188 |         pwd = os.getcwd()
189 |     except FileNotFoundError:
190 |         printf(
    |         ^^^^^^ F821
191 |             "We're in a non-existent directory... WHAT is going on!?\n",
192 |             file=sys.stderr
    |

src/raimad/compo.py:407:9: D105 Missing docstring in magic method
    |
405 |             ))
406 |
407 |     def __str__(self) -> str:
    |         ^^^^^^^ D105
408 |         return self._str()
    |

src/raimad/docparse.py:1:1: D400 First line should end with a period
  |
1 | """docparse.py: utilities for parsing docstrings"""
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
2 |
3 | from typing import NamedTuple
  |
  = help: Add period

src/raimad/docparse.py:6:7: D101 Missing docstring in public class
  |
4 | import inspect
5 |
6 | class SplitDocstring(NamedTuple):
  |       ^^^^^^^^^^^^^^ D101
7 |     heading: str
8 |     description: str
  |

src/raimad/docparse.py:12:5: D200 One-line docstring should fit on one line
   |
11 |   def split_docstring(docstring: str | None) -> SplitDocstring:
12 | /     """
13 | |     Split docstring by first line and other lines
14 | |     """
   | |_______^ D200
15 |       if not docstring:
16 |           return SplitDocstring('', '')
   |
   = help: Reformat to one line

src/raimad/docparse.py:12:5: D400 First line should end with a period
   |
11 |   def split_docstring(docstring: str | None) -> SplitDocstring:
12 | /     """
13 | |     Split docstring by first line and other lines
14 | |     """
   | |_______^ D400
15 |       if not docstring:
16 |           return SplitDocstring('', '')
   |
   = help: Add period

src/raimad/fortune.py:416:5: D103 Missing docstring in public function
    |
414 |     ]
415 |
416 | def fortune(category: str | None = None) -> str:
    |     ^^^^^^^ D103
417 |
418 |     if not category:
    |

src/raimad/helpers.py:3:39: F401 [*] `typing.Callable` imported but unused
  |
1 | """helpers.py: misc helper functions."""
2 |
3 | from typing import Iterator, TypeVar, Callable, Generic
  |                                       ^^^^^^^^ F401
4 | import math
  |
  = help: Remove unused import: `typing.Callable`

src/raimad/helpers.py:108:7: D101 Missing docstring in public class
    |
106 | T = TypeVar('T')
107 | R = TypeVar('R')
108 | class Infix(Generic[T, R]):
    |       ^^^^^ D101
109 |     left: T | None
    |

src/raimad/helpers.py:114:9: D105 Missing docstring in magic method
    |
112 |         self.left = None
113 |
114 |     def __ror__(self, left: T) -> Self:
    |         ^^^^^^^ D105
115 |         self.left = left
116 |         return self
    |

src/raimad/helpers.py:118:9: D105 Missing docstring in magic method
    |
116 |         return self
117 |
118 |     def __or__(self, right: T) -> R:
    |         ^^^^^^ D105
119 |         assert \
120 |             self.left is not None, \
    |

src/raimad/helpers.py:125:9: D102 Missing docstring in public method
    |
123 |         return self(self.left, right)
124 |
125 |     def __call__(self, left: T, right: T) -> R:
    |         ^^^^^^^^ D102
126 |         raise NotImplementedError() ## TODO undo
    |

src/raimad/helpers.py:128:7: D101 Missing docstring in public class
    |
126 |         raise NotImplementedError() ## TODO undo
127 |
128 | class Midpoint(Infix['rai.typing.PointLike', 'rai.typing.PointLike']):
    |       ^^^^^^^^ D101
129 |     def __call__(
130 |             self,
    |

src/raimad/helpers.py:143:7: D101 Missing docstring in public class
    |
141 | # TODO more than 1 input
142 |
143 | class Add(Infix['rai.typing.PointLike', 'rai.typing.PointLike']):
    |       ^^^ D101
144 |     def __call__(
145 |             self,
    |

src/raimad/helpers.py:144:9: D102 Missing docstring in public method
    |
143 | class Add(Infix['rai.typing.PointLike', 'rai.typing.PointLike']):
144 |     def __call__(
    |         ^^^^^^^^ D102
145 |             self,
146 |             p1: 'rai.typing.PointLike',
    |

src/raimad/helpers.py:156:7: D101 Missing docstring in public class
    |
154 | add = Add()
155 |
156 | class Sub(Infix['rai.typing.PointLike', 'rai.typing.PointLike']):
    |       ^^^ D101
157 |     def __call__(
158 |             self,
    |

src/raimad/helpers.py:157:9: D102 Missing docstring in public method
    |
156 | class Sub(Infix['rai.typing.PointLike', 'rai.typing.PointLike']):
157 |     def __call__(
    |         ^^^^^^^^ D102
158 |             self,
159 |             p1: 'rai.typing.PointLike',
    |

src/raimad/helpers.py:169:7: D101 Missing docstring in public class
    |
167 | sub = Sub()
168 |
169 | class Eq(Infix['rai.typing.PointLike', bool]):
    |       ^^ D101
170 |     def __call__(
171 |             self,
    |

src/raimad/helpers.py:170:9: D102 Missing docstring in public method
    |
169 | class Eq(Infix['rai.typing.PointLike', bool]):
170 |     def __call__(
    |         ^^^^^^^^ D102
171 |             self,
172 |             p1: 'rai.typing.PointLike',
    |

src/raimad/helpers.py:182:5: D103 Missing docstring in public function
    |
180 | eq = Eq()
181 |
182 | def distance_between(
    |     ^^^^^^^^^^^^^^^^ D103
183 |         p1: 'rai.typing.Point',
184 |         p2: 'rai.typing.Point'
    |

src/raimad/proxy.py:318:9: D419 Docstring is empty
    |
316 |               _deepcopied: bool = False
317 |               ) -> 'rai.typing.Proxy':
318 | /         """
319 | |         """
    | |___________^ D419
320 |           return type(self)(
321 |               self.compo,
    |

src/raimad/proxy.py:334:9: D419 Docstring is empty
    |
332 |               _deepcopied: bool = False,
333 |               ) -> 'rai.typing.Proxy':
334 | /         """
335 | |         """
    | |___________^ D419
336 |           return type(self)(
337 |               new_compo,
    |

src/raimad/proxy.py:344:9: D102 Missing docstring in public method
    |
342 |             )
343 |
344 |     def deep_copy(
    |         ^^^^^^^^^ D102
345 |             self,
346 |             _autogenned: bool = False,
    |

src/raimad/proxy.py:367:9: D102 Missing docstring in public method
    |
365 |             assert False
366 |
367 |     def deep_copy_reassign(
    |         ^^^^^^^^^^^^^^^^^^ D102
368 |             self,
369 |             new_compo: 'rai.typing.CompoLike',
    |

src/raimad/proxy.py:434:9: D105 Missing docstring in magic method
    |
432 |             ))
433 |
434 |     def __str__(self) -> str:
    |         ^^^^^^^ D105
435 |         return self._str()
    |

src/raimad/rectwire.py:48:9: D102 Missing docstring in public method
   |
47 |     @classmethod
48 |     def from_points(
   |         ^^^^^^^^^^^ D102
49 |             cls,
50 |             p1: 'rai.typing.Point',
   |

src/raimad/rectwire.py:57:9: D102 Missing docstring in public method
   |
56 |     @classmethod
57 |     def from_polar(
   |         ^^^^^^^^^^ D102
58 |             cls,
59 |             p1: 'rai.typing.Point',
   |

src/raimad/show.py:11:8: F401 [*] `sys` imported but unused
   |
 9 | from pathlib import Path
10 |
11 | import sys
   |        ^^^ F401
12 |
13 | import raimad as rai
   |
   = help: Remove unused import: `sys`

src/raimad/show.py:66:5: D202 [*] No blank lines allowed after function docstring (found 1)
   |
65 | def is_klayout_running() -> bool:
66 |     """Check whether klayout is already running."""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D202
67 |
68 |     if platform.system() in {"Linux", "Darwin"}:
   |
   = help: Remove blank line(s) after function docstring

src/raimad/show.py:91:5: D202 [*] No blank lines allowed after function docstring (found 1)
   |
90 | def get_cifview_args(file: str) -> tuple[str, ...]:
91 |     """Get a command to open `file` in a CIF viewer."""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D202
92 |
93 |     custom_command = get_custom_cifview_command()
   |
   = help: Remove blank line(s) after function docstring

src/raimad/show.py:171:5: D202 [*] No blank lines allowed after function docstring (found 1)
    |
170 | def show(compo: 'rai.typing.CompoLike', ignore_running: bool = False) -> None:
171 |     """Export `compo` and open it in a CIF viewer."""
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D202
172 |
173 |     file = Path(tempfile.gettempdir()) / "RAIMAD-SHOW.cif"
    |
    = help: Remove blank line(s) after function docstring

Found 107 errors.
[*] 7 fixable with the `--fix` option (11 hidden fixes can be enabled with the `--unsafe-fixes` option).
