name: Test-Lint-Check

on:
  push:
    branches: [ "joss" ]
  pull_request:
    branches: [ "joss" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name:  install apt dependencies
      run: apt install jq

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest mypy
        pip install -e .
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#    - name: Lint with flake8
#
#      run: |
#        # stop the build if there are Python syntax errors or undefined names
#        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest && {
          echo 'BADGE_PYTEST=Passing' >> $GITHUB_ENV
          echo 'BADGE_PYTEST_VAL=100' >> $GITHUB_ENV
        } || {
          echo 'BADGE_PYTEST=Failing' >> $GITHUB_ENV
          echo 'BADGE_PYTEST_VAL=0' >> $GITHUB_ENV
        }

    - name: Test with mypy
      run: |
        mypy --strict src/raimad && {
          echo 'BADGE_MYPY=No Issues' >> $GITHUB_ENV
          echo 'BADGE_MYPY_VAL=100' >> $GITHUB_ENV
        } || {
          echo 'BADGE_MYPY=Issues Found' >> $GITHUB_ENV
          echo 'BADGE_MYPY_VAL=0' >> $GITHUB_ENV
        }

    - name: Get test coverage
      run: |
        coverage run -m unittest && {
          coverage_percent=$(coverage json -q -o /dev/stdout -i | jq '.totals.percent_covered_display' -r)
          echo "BADGE_COVERAGE=$coverage_percent%" >> $GITHUB_ENV
          echo "BADGE_COVERAGE_VAL=$coverage_percent" >> $GITHUB_ENV
        } || {
          echo 'BADGE_COVERAGE=Error' >> $GITHUB_ENV
          echo 'BADGE_COVERAGE_VAL=0' >> $GITHUB_ENV
        }

    - name: Create pytest Badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 767d80027892395f1cc61e4829810985
        filename: pytest.svg
        label: tests
        message: ${{ env.BADGE_PYTEST }}
        valColorRange: ${{ env.BADGE_PYTEST_VAL }}
        maxColorRange: 100
        minColorRange: 0

    - name: Create mypy Badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 767d80027892395f1cc61e4829810985
        filename: mypy.svg
        label: mypy --strict
        message: ${{ env.BADGE_MYPY }}
        valColorRange: ${{ env.BADGE_MYPY_VAL }}
        maxColorRange: 100
        minColorRange: 0

    - name: Create coverage Badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 767d80027892395f1cc61e4829810985
        filename: coverage.svg
        label: Test Coverage
        message: ${{ env.BADGE_COVERAGE }}
        valColorRange: ${{ env.BADGE_COVERAGE_VAL }}
        maxColorRange: 100
        minColorRange: 0

